package aes

import (
	"github.com/CrackedPoly/AES-implementation-in-Golang/src/utils"
	"reflect"
	"testing"
)

func TestKeyExpansion(t *testing.T) {
	var keyExpansionTests = []struct {
		key       []byte   // key
		roundKeys []uint32 // expected round keys
	}{
		{
			key: []byte{
				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
				0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			},
			roundKeys: []uint32{
				0x69616d53, 0x74616576, 0x96c6cc6c, 0x696e6777,
				0xf7e498aa, 0x8385fddc, 0x154331b0, 0x7c2d56c7,
				0x2d555eba, 0xaed0a366, 0xbb9392d6, 0xc7bec411,
				0x8749dc7c, 0x29997f1a, 0x920aedcc, 0x55b429dd,
				0x02ec1d80, 0x2b75629a, 0xb97f8f56, 0xeccba68b,
				0x0dc8204e, 0x26bd42d4, 0x9fc2cd82, 0x73096b09,
				0x2cb721c1, 0x0a0a6315, 0x95c8ae97, 0xe6c1c59e,
				0x14112a4f, 0x1e1b495a, 0x8bd3e7cd, 0x6d122253,
				0x5d82c773, 0x43998e29, 0xc84a69e4, 0xa5584bb7,
				0x2c316e75, 0x6fa8e05c, 0xa7e289b8, 0x02bac20f,
				0xee141802, 0x81bcf85e, 0x265e71e6, 0x24e4b3e9,
			},
		},
		{
			key: []byte{
				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
				0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			},
			roundKeys: []uint32{
				0x69616d53, 0x74616576, 0x96c6cc6c, 0x696e6777,
				0x69616d53, 0x74616576, 0x872c55c1, 0xf34d30b7,
				0x658bfcdb, 0x0ce59bac, 0x6584f6ff, 0x11e59389,
				0x5cf0f243, 0xafbdc2f4, 0xca363e2f, 0xc6d3a583,
				0xa357537c, 0xb2b2c0f5, 0x6f4a1474, 0xc0f7d680,
				0x0ac1e8af, 0xcc124d2c, 0x6f451e50, 0xddf7dea5,
				0x0f5712b5, 0xcfa0c435, 0xc5612c9a, 0x097361b6,
				0x66367fe6, 0xbbc1a143, 0x6765085f, 0xa8c5cc6a,
				0x6da4e0f0, 0x64d78146, 0x02e1fea0, 0xb9205fe3,
				0xf0aa1909, 0x586fd563, 0x35cb3593, 0x511cb4d5,
				0x53fd4a75, 0xeadd1596, 0x71f3898e, 0x299c5ced,
				0x1c57697e, 0x4d4bddab, 0x1eb697de, 0xf46b8248,
				0x8ee0db31, 0xa77c87dc, 0xbb2beea2, 0xf6603309,
			},
		},
		{
			key: []byte{
				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
				0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
				0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			},
			roundKeys: []uint32{
				0x69616d53, 0x74616576, 0x96c6cc6c, 0x696e6777,
				0x69616d53, 0x74616576, 0x96c6cc6c, 0x696e6777,
				0xf7e498aa, 0x8385fddc, 0x154331b0, 0x7c2d56c7,
				0x79b9dc95, 0x0dd8b9e3, 0x9b1e758f, 0xf27012f8,
				0xa42dd923, 0x27a824ff, 0x32eb154f, 0x4ec64388,
				0x560dc651, 0x5bd57fb2, 0xc0cb0a3d, 0x32bb18c5,
				0x4a807f00, 0x6d285bff, 0x5fc34eb0, 0x11050d38,
				0xd4661156, 0x8fb36ee4, 0x4f7864d9, 0x7dc37c1c,
				0x6c90e3ff, 0x01b8b800, 0x5e7bf6b0, 0x4f7efb88,
				0x50951e92, 0xdf267076, 0x905e14af, 0xed9d68b3,
				0x22d58eaa, 0x236d36aa, 0x7d16c01a, 0x32683b92,
				0x73d0fcdd, 0xacf68cab, 0x3ca89804, 0xd135f0b7,
				0x94592794, 0xb734113e, 0xca22d124, 0xf84aeab6,
				0x32067b93, 0x9ef0f738, 0xa2586f3c, 0x736d9f8b,
				0xe8821a1b, 0x5fb60b25, 0x9594da01, 0x6dde30b7,
			},
		},
	}
	for _, tuple := range keyExpansionTests {
		a, err := NewAES(tuple.key)
		if err != nil {
			t.Fatal(err)
		}
		if !reflect.DeepEqual(a.roundKeys, tuple.roundKeys) {
			t.Fatalf("key expansion test failed with %d key length", 8*len(a.key))
		}
	}
}

func TestECB(t *testing.T) {
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		cipher = []byte{
			0xfc, 0x76, 0x01, 0xbe, 0x80, 0x5e, 0x66, 0x8d,
			0x1a, 0xe0, 0x8f, 0x85, 0xdd, 0x23, 0x66, 0x61,
			0xc5, 0x68, 0x9d, 0x88, 0x37, 0x8e, 0x81, 0x80,
			0x99, 0xd4, 0xba, 0x88, 0x61, 0xff, 0x13, 0xf0,
			0xfc, 0x76, 0x01, 0xbe, 0x80, 0x5e, 0x66, 0x8d,
			0x1a, 0xe0, 0x8f, 0x85, 0xdd, 0x23, 0x66, 0x61,
			0xc5, 0x68, 0x9d, 0x88, 0x37, 0x8e, 0x81, 0x80,
			0x99, 0xd4, 0xba, 0x88, 0x61, 0xff, 0x13, 0xf0,
			0x47, 0x43, 0x7f, 0x07, 0x8b, 0x08, 0xd4, 0xf8,
			0x1c, 0xf1, 0x0d, 0x83, 0xb1, 0x70, 0x72, 0x5e,
		}
	)
	a, err := NewAES(key)
	if err != nil {
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptECB(in, utils.PKCS7Padding), cipher) {
		t.Fatal("ECB encryption test failed.")
	}
	if !reflect.DeepEqual(a.DecryptECB(cipher, utils.PKCS7Unpadding), in) {
		t.Fatal("ECB decryption test failed.")
	}
}

func TestCBC(t *testing.T) {
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		cipher = []byte{
			0x9d, 0xc8, 0x20, 0x6d, 0xc1, 0xb4, 0x59, 0x43,
			0x65, 0xfb, 0x5a, 0x69, 0xf0, 0x74, 0x38, 0x8d,
			0x77, 0x28, 0x70, 0xea, 0x8f, 0x71, 0xf2, 0x00,
			0x33, 0xb7, 0x2b, 0x4d, 0x03, 0x80, 0xa0, 0x2d,
			0xc0, 0x5e, 0x2b, 0x2d, 0x58, 0x62, 0x83, 0x9d,
			0xd2, 0x98, 0x4f, 0x5f, 0x3e, 0x46, 0xa8, 0xfd,
			0x37, 0xbb, 0x03, 0x36, 0x5d, 0xf0, 0x8c, 0x63,
			0xe9, 0x48, 0x85, 0x6a, 0xb5, 0xc5, 0x0b, 0x71,
			0xd0, 0x49, 0xe9, 0x7e, 0x78, 0x25, 0xaf, 0x1f,
			0x68, 0x3f, 0xbf, 0x8d, 0xed, 0xe6, 0xeb, 0x01,
		}
	)
	a, err := NewAES(key)
	if err != nil {
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptCBC(in, iv, utils.PKCS7Padding), cipher) {
		t.Fatal("CBC encryption test failed.")
	}
	if !reflect.DeepEqual(a.DecryptCBC(cipher, iv, utils.PKCS7Unpadding), in) {
		t.Fatal("CBC decryption test failed.")
	}
}

func TestCFB(t *testing.T) {
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		s      = 16
		cipher = []byte{
			0xf5, 0x69, 0x00, 0x0d, 0xa6, 0x80, 0xe8, 0x93,
			0x17, 0x02, 0x95, 0x4a, 0x5f, 0xf9, 0x65, 0xa3,
			0x6e, 0xb3, 0xda, 0xcd, 0xed, 0x3e, 0x17, 0xd0,
			0x44, 0x27, 0xf5, 0x5f, 0xc1, 0x29, 0xc3, 0x51,
			0x58, 0xd5, 0xaf, 0x36, 0x09, 0xdf, 0x41, 0xda,
			0xa0, 0xfc, 0x1f, 0x19, 0x1d, 0xd1, 0xd3, 0xbc,
			0xf7, 0x94, 0xb8, 0x75, 0xad, 0xf7, 0x99, 0xa5,
			0x78, 0x6c, 0x2b, 0x6a, 0xc7, 0xc6, 0x1c, 0x26,
			0x19,
		}
	)
	a, err := NewAES(key)
	if err != nil {
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptCFB(in, iv, s), cipher) {
		t.Fatal("CFB encryption test failed.")
	}
	if !reflect.DeepEqual(a.DecryptCFB(cipher, iv, s), in) {
		t.Fatal("CFB decryption test failed.")
	}
}

func TestOFB(t *testing.T) {
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		cipher = []byte{
			0xf5, 0x69, 0x00, 0x0d, 0xa6, 0x80, 0xe8, 0x93,
			0x17, 0x02, 0x95, 0x4a, 0x5f, 0xf9, 0x65, 0xa3,
			0x3d, 0x28, 0x62, 0x1f, 0xdd, 0x7f, 0xdd, 0xb2,
			0x40, 0x56, 0xdf, 0x99, 0x8c, 0x8a, 0x5f, 0xb7,
			0x91, 0x90, 0x42, 0x07, 0xda, 0x00, 0x72, 0x6f,
			0xe5, 0xce, 0x1a, 0x1c, 0x75, 0x3a, 0xa5, 0x2b,
			0x77, 0x59, 0x90, 0x1b, 0xfd, 0x2a, 0x30, 0x98,
			0xe8, 0xf6, 0x1f, 0x59, 0x6d, 0x23, 0xd9, 0xb2,
			0xdb,
		}
	)
	a, err := NewAES(key)
	if err != nil {
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptOFB(in, iv), cipher) {
		t.Fatal("OFB encryption test failed.")
	}
	if !reflect.DeepEqual(a.DecryptOFB(cipher, iv), in) {
		t.Fatal("OFB decryption test failed.")
	}
}

func TestCTR(t *testing.T) {
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		cipher = []byte{
			0xf5, 0x69, 0x00, 0x0d, 0xa6, 0x80, 0xe8, 0x93,
			0x17, 0x02, 0x95, 0x4a, 0x5f, 0xf9, 0x65, 0xa3,
			0x96, 0x71, 0xef, 0xc0, 0x8b, 0xa7, 0x0c, 0x5e,
			0x1f, 0xb1, 0xfc, 0x0c, 0x8c, 0x7c, 0xac, 0xb6,
			0x2f, 0xcd, 0x2f, 0x59, 0xf8, 0xbe, 0x3c, 0x7e,
			0xc0, 0x6e, 0x3c, 0xa5, 0x09, 0xf6, 0x79, 0xe1,
			0xde, 0xd1, 0xf0, 0x23, 0x15, 0x0b, 0x12, 0x42,
			0xc3, 0x6e, 0x3f, 0xbb, 0x09, 0xc4, 0xce, 0xae,
			0x96,
		}
	)
	a, err := NewAES(key)
	if err != nil {
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptCTR(in, iv), cipher) {
		t.Fatal("CTR encryption test failed.")
	}
	if !reflect.DeepEqual(a.DecryptCTR(cipher, iv), in) {
		t.Fatal("CTR decryption test failed.")
	}
}

func TestGCM(t *testing.T) {
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		auth = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		tagLen = 16
		tag    = []byte{
			0x46, 0xac, 0x67, 0x7f, 0x5b, 0xcf, 0x71, 0xd3,
			0x6e, 0x7d, 0xed, 0xa4, 0x77, 0x63, 0xc0, 0xb8,
		}
		cipher = []byte{
			0x53, 0x95, 0xb4, 0x85, 0xac, 0x99, 0x77, 0xec,
			0x41, 0xce, 0x54, 0x0e, 0xec, 0x46, 0xf6, 0x52,
			0x56, 0x62, 0xf4, 0xaa, 0x73, 0x04, 0x5e, 0x8b,
			0x07, 0x41, 0x64, 0xa2, 0xb1, 0x66, 0x9f, 0x82,
			0x7d, 0x93, 0x84, 0x1a, 0x11, 0x31, 0x13, 0x3a,
			0x78, 0x27, 0xb9, 0xf7, 0xba, 0x5a, 0xea, 0x22,
			0x60, 0x79, 0xa4, 0xba, 0xd5, 0x01, 0x70, 0x68,
			0x3c, 0xe1, 0x91, 0x74, 0xbf, 0x88, 0x88, 0x84,
			0xf2,
		}
	)
	a, err := NewAES(key)
	if err != nil {
		t.Fatal(err)
	}
	actualCipher, actualTag := a.EncryptGCM(in, iv, auth, tagLen)
	if !reflect.DeepEqual(actualCipher, cipher) || !reflect.DeepEqual(actualTag, tag) {
		t.Fatal("GCM encryption test failed.")
	}
	if !reflect.DeepEqual(a.DecryptGCM(cipher, iv, auth, tag), in) {
		t.Fatal("GCM decryption test failed.")
	}
}
